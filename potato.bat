@echo off
setlocal enabledelayedexpansion

:: BPotato Blender Addon Build Script with Git Branch Versioning
:: ===========================================================

:: User Configurable Variables
set ADDON_NAME=BPotato
set SOURCE_DIR=src
set DIST_DIR=dist
set DEFAULT_BLENDER_VERSION=4.3

:: Initialize variables
set BLENDER_VERSION=%DEFAULT_BLENDER_VERSION%
set BLENDER_BASE=%APPDATA%\Blender Foundation\Blender
set OPERATION=help

:: Get current Git branch
set GIT_BRANCH=unknown
git rev-parse --abbrev-ref HEAD 2>nul >nul && (
    for /f "delims=" %%b in ('git rev-parse --abbrev-ref HEAD') do set "GIT_BRANCH=%%b"
)

:: Parse command-line arguments
if not "%~1"=="" set OPERATION=%~1
if not "%~2"=="" set BLENDER_VERSION=%~2

:: Calculate install path
set ADDON_INSTALL_DIR=%BLENDER_BASE%\%BLENDER_VERSION%\scripts\addons

:: Main command router
goto %OPERATION% 2>nul || goto help

:: Help documentation
:help
echo.
echo  BPotato Blender Addon - Build Script Help
echo  ========================================
echo  Branch: !GIT_BRANCH!
echo.
echo  potato [command] [blender_version]
echo.
echo  Commands:
echo    package     - Build addon zip package
echo    install     - Install to specified Blender version
echo    uninstall   - Remove from Blender addons directory
echo    clean       - Clean build artifacts
echo    test        - Run code checks (requires flake8)
echo    dev         - Clean + package + install
echo.
echo  Blender Version:
echo    Default: %DEFAULT_BLENDER_VERSION%
echo    Current: %BLENDER_VERSION%
echo    Install path: %ADDON_INSTALL_DIR%
echo.
echo  Examples:
echo    potato install
echo    potato install 3.6
echo    potato uninstall 4.0
echo.
goto :eof

:: Clean build artifacts
:clean
echo.
echo  Cleaning build artifacts...
if exist "%DIST_DIR%" rmdir /s /q "%DIST_DIR%"
del /s /q "%SOURCE_DIR%\*.pyc" 2>nul
echo  Done.
goto :eof

:: Build addon zip package
:package
call :clean
echo.
echo  Packaging addon [!GIT_BRANCH!]...
if not exist "%DIST_DIR%" mkdir "%DIST_DIR%"

:: Generate version based on Git branch
set "VERSION_FILE=%SOURCE_DIR%\version.py"
echo # Generated by build script > "%VERSION_FILE%"
echo import bpy >> "%VERSION_FILE%"
echo >> "%VERSION_FILE%"
echo version = ^(1, 1, '!GIT_BRANCH!'^) >> "%VERSION_FILE%"
echo >> "%VERSION_FILE%"
echo bl_info = { >> "%VERSION_FILE%"
echo    "name": "BPotato", >> "%VERSION_FILE%"
echo    "author": "Lvoxx", >> "%VERSION_FILE%"
echo    "version": version, >> "%VERSION_FILE%"
echo    "blender": (4, 3, 0), >> "%VERSION_FILE%"
echo    "location": "View3D > Sidebar > LSCherry Tools", >> "%VERSION_FILE%"
echo    "description": "Tools for LSCherry project [!GIT_BRANCH!]", >> "%VERSION_FILE%"
echo    "category": "Tool", >> "%VERSION_FILE%"
echo } >> "%VERSION_FILE%"

set ZIP_PATH="%DIST_DIR%\%ADDON_NAME%_!GIT_BRANCH!.zip"

:: Remove existing zip if present
if exist %ZIP_PATH% del %ZIP_PATH%

:: Create zip using PowerShell
powershell -Command "$src = '%SOURCE_DIR%'; $dst = %ZIP_PATH%; $exclude = @('*.pyc', '__pycache__'); Compress-Archive -Path $src\* -DestinationPath $dst -Exclude $exclude"

if exist %ZIP_PATH% (
    echo  Created: %ZIP_PATH%
) else (
    echo  Error: Failed to create zip package
    exit /b 1
)

:: Cleanup temporary files
del /q "%SOURCE_DIR%\version.py" 2>nul
goto :eof

:: Install to Blender
:install
call :package
echo.
echo  Installing [!GIT_BRANCH!] to Blender %BLENDER_VERSION%...

:: Verify Blender directory exists
if not exist "%ADDON_INSTALL_DIR%" (
    echo  ERROR: Blender %BLENDER_VERSION% not found at:
    echo  "%ADDON_INSTALL_DIR%"
    echo  Please verify Blender version and installation
    exit /b 1
)

:: Extract zip to addons directory
powershell -Command "Expand-Archive -Path %ZIP_PATH% -DestinationPath '%ADDON_INSTALL_DIR%' -Force"

echo  Installed to: "%ADDON_INSTALL_DIR%\%ADDON_NAME%"
echo  Branch: !GIT_BRANCH!
echo  Please restart Blender to activate the addon
goto :eof

:: Remove from Blender
:uninstall
echo.
echo  Uninstalling from Blender %BLENDER_VERSION%...
set ADDON_PATH="%ADDON_INSTALL_DIR%\%ADDON_NAME%"

if exist %ADDON_PATH% (
    rmdir /s /q %ADDON_PATH%
    echo  Removed: %ADDON_PATH%
) else (
    echo  Addon not found: %ADDON_PATH%
)
goto :eof

:: Run code checks
:test
echo.
echo  Running code checks...
echo  Note: Requires flake8 installed (pip install flake8)
flake8 "%SOURCE_DIR%"
if errorlevel 1 (
    echo  Code checks failed
    exit /b 1
) else (
    echo  All tests passed!
)
goto :eof

:: Development shortcut
:dev
call :install
echo.
echo  Development cycle complete for [!GIT_BRANCH!]!
goto :eof

:: End of script
:eof
endlocal